// Natral logarithm function ln(x) for double and quaduple-precision floating point
// Algorithm is taken from GLibC, Made by Stephen L. Moshier (LGPL Licence)
/*
   Copyright (C) 2018-2023 Free Software Foundation, Inc.
   This file is part of the GNU C Library. Adapted for CSpaceEngine

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <https://www.gnu.org/licenses/>.
*/

// Ordinary Code. (普普通通的代码)

#include "CSE/CSEBase/CSEBase.h"
#include "CSE/CSEBase/MathFuncs.h"

_CSE_BEGIN

float64 __cdecl ln(float64 _X) { return __IEEE754_LNF64(_X); };

_EXTERN_C

/*
 * Natural logarithm for double precision.
 * 
 * Algorithm:

	x = 2^k z
	log(x) = k ln2 + log(c) + log(z/c)
	log(z/c) = poly(z/c - 1)

 * where z is in [1.6p-1; 1.6p0] which is split into N subintervals and z falls
 * into the ith one, then table entries are computed as

	tab[i].invc = 1/c
	tab[i].logc = (double)log(c)
	tab2[i].chi = (double)c
	tab2[i].clo = (double)(c - (double)c)

 * where c is near the center of the subinterval and is chosen by trying +-2^29
 * floating point invc candidates around 1/center and selecting one for which

	1) the rounding error in 0x1.8p9 + logc is 0,
	2) the rounding error in z - chi - clo is < 0x1p-66 and
	3) the rounding error in (double)log(c) is minimized (< 0x1p-66).

 * Note: 1) ensures that k*ln2hi + logc can be computed without rounding error,
         2) ensures that z/c - 1 can be computed as (z - chi - clo)*invc with close to
            a single rounding error when there is no fast fma for z*invc - 1, 3) ensures
            that logc + poly(z/c - 1) has small error, however near x == 1 when
            |log(x)| < 0x1p-4, this is not enough so that is special cased.
 *
 */

const double __Lnf64_table[]
{
	1.45042492403982925531e+00, -3.71856564563358915620e-01,
	1.44225350832727605699e+00, -3.66206826689449371770e-01,
	1.43417361743500038074e+00, -3.60588806979194487212e-01,
	1.42618381632999491337e+00, -3.55002217141986875504e-01,
	1.41828255270529646204e+00, -3.49446669688290967315e-01,
	1.41046829217593350236e+00, -3.43921771360328420997e-01,
	1.40273961474680031181e+00, -3.38427192126118825399e-01,
	1.39509544389323125735e+00, -3.32962831494342026417e-01,
	1.38753382324857543750e+00, -3.27527943457425863016e-01,
	1.38005392110585933807e+00, -3.22122571670888646622e-01,
	1.37265426954197078402e+00, -3.16746288479976101371e-01,
	1.36533327984468022542e+00, -3.11398559892836601648e-01,
	1.35809020458787399477e+00, -3.06079451516552580870e-01,
	1.35092348921321381283e+00, -3.00788424667643994326e-01,
	1.34383208406998888584e+00, -2.95525296847699792124e-01,
	1.33681469747420034189e+00, -2.90289692758506134851e-01,
	1.32987011467773608153e+00, -2.85081279327755510167e-01,
	1.32299733916110606735e+00, -2.79899873914700947353e-01,
	1.31619535274136700842e+00, -2.74745266218701544858e-01,
	1.30946281256722385500e+00, -2.69616986370124323003e-01,
	1.30279904554710412867e+00, -2.64515061803081152902e-01,
	1.29620242294389420579e+00, -2.59438776276738281013e-01,
	1.28967262758155465363e+00, -2.54388409098169177014e-01,
	1.28320803057455368190e+00, -2.49363216351298433437e-01,
	1.27680788598337602302e+00, -2.44363124059759684314e-01,
	1.27047140606875519353e+00, -2.39388017478972869867e-01,
	1.26419760549494819557e+00, -2.34437616967056783324e-01,
	1.25798535751488205214e+00, -2.29511518715185047768e-01,
	1.25183377506554571745e+00, -2.24609496343987302680e-01,
	1.24574219190973045635e+00, -2.19731490377057525620e-01,
	1.23970949666255081389e+00, -2.14877075284789498255e-01,
	1.23373484635892327610e+00, -2.10046029103637010849e-01,
	1.22781769730288026210e+00, -2.05238363739340456959e-01,
	1.22195701906184739371e+00, -2.00453687513686418242e-01,
	1.21615197329777569024e+00, -1.95691753775804500037e-01,
	1.21040180950097253643e+00, -1.90952378452038828982e-01,
	1.20470580571897301070e+00, -1.86235392502908325696e-01,
	1.19906311854419644902e+00, -1.81540517315511351626e-01,
	1.19347330044623078926e+00, -1.76867795743191891233e-01,
	1.18793508128473845886e+00, -1.72216574064123051357e-01,
	1.18244813228331246968e+00, -1.67586977659425429010e-01,
	1.17701149769219548524e+00, -1.62978596872903835902e-01,
	1.17162481218094649549e+00, -1.58391513778042281047e-01,
	1.16628692316747151203e+00, -1.53825132414567633532e-01,
	1.16099774867627658637e+00, -1.49279763589220237918e-01,
	1.15575632207958034492e+00, -1.44754953981191647472e-01,
	1.15056191054803469420e+00, -1.40250440908175733057e-01,
	1.14541388885059736147e+00, -1.35766046668550188770e-01,
	1.14031187737465589116e+00, -1.31301801635572701343e-01,
	1.13525502257475130463e+00, -1.26857315187635322218e-01,
	1.13024290948312655658e+00, -1.22432573767127905739e-01,
	1.12527476930680481182e+00, -1.18027245218627285794e-01,
	1.12035015710398755395e+00, -1.13641276716634820332e-01,
	1.11546833276801238277e+00, -1.09274346112783860008e-01,
	1.11062914632921572178e+00, -1.04926653249435730686e-01,
	1.10583158133015957425e+00, -1.00597614226444420638e-01,
	1.10107521776960259885e+00, -9.62871730905590084149e-02,
	1.09635971379525121172e+00, -9.19953406955755781382e-02,
	1.09168448275503982003e+00, -8.77219003668869845569e-02,
	1.08704872912777839034e+00, -8.34664361386785458308e-02,
	1.08245235738831202532e+00, -7.92291682754466819461e-02,
	1.07789482250258839002e+00, -7.50099004750381936901e-02,
	1.07337517316010755408e+00, -7.08080513335289651877e-02,
	1.06889358507335097137e+00, -6.66240808515112803434e-02,
	1.06444917066555055918e+00, -6.24574547191514284350e-02,
	1.06004148463283054404e+00, -5.83080438042316018254e-02,
	1.05567013161816047884e+00, -5.41757611231332703028e-02,
	1.05133475055692593436e+00, -5.00605478968054740108e-02,
	1.04703472884421566746e+00, -4.59621011990520855761e-02,
	1.04276992296529535942e+00, -4.18805600886571482988e-02,
	1.03853950137381745300e+00, -3.78154005618398514343e-02,
	1.03434341894034509401e+00, -3.37668475791588207358e-02,
	1.03018110731733147922e+00, -2.97346191317728880676e-02,
	1.02605204362129698303e+00, -2.57184702392123654136e-02,
	1.02195610823361970887e+00, -2.17185439254308221280e-02,
	1.01789265057849220852e+00, -1.77344612698107084725e-02,
	1.01386144362445862477e+00, -1.37662524640518313390e-02,
	1.00986201865013414114e+00, -9.81370632257494435180e-03,
	1.00589385597341340883e+00, -5.87655515005280904006e-03,
	1.00195696235014009012e+00, -1.95504999385320843430e-03,
	9.96108992308850860198e-01, +3.89859735560094122775e-03,
	9.88417033818520085475e-01, +1.16505712863954613567e-02,
	9.80842919100529675447e-01, +1.93429554789190660813e-02,
	9.73384016998744550087e-01, +2.69766014846481994027e-02,
	9.66037756887655585381e-01, +3.45523597284227435011e-02,
	9.58801494530736930777e-01, +4.20712176718325281399e-02,
	9.51672856907311071062e-01, +4.95339409501411864767e-02,
	9.44649463596582195102e-01, +5.69413582959441555431e-02,
	9.37728899302622265211e-01, +6.42943916834610718070e-02,
	9.30909107379068068155e-01, +7.15936354946506980923e-02,
	9.24187681612722022884e-01, +7.88401093377615325153e-02,
	9.17562676559919188080e-01, +8.60343890597050631186e-02,
	9.11032040362403372491e-01, +9.31772118001390481368e-02,
	9.04593583976202375574e-01, +1.00269514627484568337e-01,
	8.98245637592282486494e-01, +1.07311709563305157644e-01,
	8.91986096678250128811e-01, +1.14304733207177378063e-01,
	8.85813112118512879789e-01, +1.21249285030330611335e-01,
	8.79725075760676045178e-01, +1.28145834229599131504e-01,
	8.73720137263468532574e-01, +1.34995163685175612045e-01,
	8.67796640578227251872e-01, +1.41797876818941404053e-01,
	8.61952805006073852212e-01, +1.48554760390311457741e-01,
	8.56187235442069205504e-01, +1.55266193765896787227e-01,
	8.50498392781689260822e-01, +1.61932756881469686050e-01,
	8.44884457279030387511e-01, +1.68555397922204974748e-01,
	8.39344274157596492714e-01, +1.75134317994775301486e-01,
	8.33876224934943843792e-01, +1.81670298986432499078e-01,
	8.28478932055777828047e-01, +1.88163871460233167454e-01,
	8.23151080006583213411e-01, +1.94615522847925603855e-01,
	8.17891390377870730610e-01, +2.01025725793897436233e-01,
	8.12698400724537362017e-01, +2.07395209079550113529e-01,
	8.07571002946022686864e-01, +2.13724298405963963887e-01,
	8.02507888116041456783e-01, +2.20013594598185591167e-01,
	7.97507737936433147574e-01, +2.26263741628599746036e-01,
	7.92569604966372964761e-01, +2.32474947476930537960e-01,
	7.87692364125411437215e-01, +2.38647666206588837667e-01,
	7.82874672494099810294e-01, +2.44782656474058057938e-01,
	7.78115538879081136692e-01, +2.50880258273241452116e-01,
	7.73413955786977691531e-01, +2.56940855251059474540e-01,
	7.68768717991493266695e-01, +2.62965111551011432311e-01,
	7.64179069804185373549e-01, +2.68953132718934284640e-01,
	7.59643876369239912094e-01, +2.74905539246105945494e-01,
	7.55162195107866751620e-01, +2.80822724847894278355e-01,
	7.50733178021686597958e-01, +2.86704979267256021558e-01,
	7.46355719636175085618e-01, +2.92552956455097046273e-01,
	7.42028936486965329244e-01, +2.98367038614287594100e-01,
	7.37752153706587643356e-01, +3.04147345872820551449e-01,
	7.33524296600260750090e-01, +3.09894557748293664190e-01,
	7.29344777457840987012e-01, +3.15608713018718844978e-01,

	6.89453127442630431254e-01, +2.60290652810534987988e-17,
	6.93359381153316634006e-01, +5.16074485199314154263e-17,
	6.97265650297267391977e-01, +5.29067241488786892065e-17,
	7.01171888609214755128e-01, +7.80103063480601349036e-18,
	7.05078122897693893023e-01, -2.47135533768868399425e-17,
	7.08984388764455797372e-01, -4.64133896368629555133e-17,
	7.12890681554255278840e-01, +3.33874080659403661009e-17,
	7.16796835927830278123e-01, -2.64545873380500980189e-17,
	7.20703152056316298513e-01, +2.42840963345222851945e-17,
	7.24609368305467294036e-01, +4.85782435031981981545e-17,
	7.28515564471803545032e-01, -1.30147765988944867635e-17,
	7.32421903693550646608e-01, -1.04023176712258975985e-17,
	7.36328114746589990069e-01, +3.07829142746743127296e-17,
	7.40234371513079691951e-01, -1.43049989766230325426e-17,
	7.44140590073840257901e-01, -2.86259557855713033180e-17,
	7.48046832436400022104e-01, +5.16090935356356450631e-17,
	7.51953133590288480548e-01, +4.42342394953631895349e-17,
	7.55859418911670633001e-01, -4.68301676209950807300e-17,
	7.59765636550230549773e-01, +4.46674200751477183065e-17,
	7.63671935088773734535e-01, -4.81344987751902663208e-17,
	7.67578087670500952555e-01, -4.33710153505422857148e-17,
	7.71484439697953550130e-01, -2.51564447225170711391e-17,
	7.75390574796675169367e-01, -4.16363618496132902213e-17,
	7.79296868608476578366e-01, +3.38371613841651653925e-17,
	7.83203182701066036309e-01, +4.37920656505675826634e-17,
	7.87109410903091277767e-01, +2.73229309761463961392e-17,
	7.91015578303115307612e-01, -5.46366122536404574419e-17,
	7.94921812107157177429e-01, -1.43205026341898681050e-17,
	7.98828103154222923798e-01, -4.07667314028090236209e-17,
	8.02734310914679616289e-01, -4.03382643525400861696e-17,
	8.06640590148032243789e-01, +1.72414280716508154457e-18,
	8.10546936362593339886e-01, -4.55342189309245233590e-17,
	8.14453157172011499298e-01, +1.82121692058914210743e-17,
	8.18359389406139614564e-01, +4.98642880258942731442e-17,
	8.22265655901829650709e-01, +4.33599041672668872818e-17,
	8.26171930800634335412e-01, -5.42200147166112724039e-17,
	8.30078177803083017139e-01, -5.33360372892903523702e-17,
	8.33984453807667391878e-01, -1.12706484426823859811e-17,
	8.37890549898441361343e-01, -3.16512673480039818910e-17,
	8.41796842061866890106e-01, +1.12862830625658653346e-17,
	8.45703056817380782739e-01, +5.64359596444844197195e-18,
	8.49609372517373340195e-01, -2.16878346323681870725e-17,
	8.53515553446267727367e-01, -2.25482342179149768031e-17,
	8.57421943207714587487e-01, +4.68326055635313917232e-17,
	8.61328112944370616333e-01, +2.51482968841227952795e-17,
	8.65234289353205343609e-01, -8.67218757094946717456e-18,
	8.69140539793882838104e-01, -1.25762682855597514562e-17,
	8.73046860819439163315e-01, -2.99308512651479977838e-17,
	8.76953068578311678571e-01, +4.81480150768164371541e-17,
	8.80859348881810055865e-01, -9.10549533611021928261e-18,
	8.84765559340966678548e-01, -3.51241465162076609478e-17,
	8.88671840226208042957e-01, +3.55526181537402269893e-17,
	8.92578087001761333319e-01, +1.69238050354099398620e-17,
	8.96484436737455370192e-01, -1.08378817917157018958e-17,
	9.00390560886268342955e-01, +5.29005457241383633120e-17,
	9.04296835868207748987e-01, +5.33307210887845166638e-17,
	9.08203167105744113563e-01, +1.86400407532329776527e-17,
	9.12109399330549686091e-01, +4.46797283205407511118e-17,
	9.16015584902645674248e-01, -5.21621341958503269901e-18,
	9.19921962286249894625e-01, -2.73247310328468732751e-17,
	9.23828188071714295759e-01, -1.77692633934341931646e-17,
	9.27734301272792882820e-01, +4.94336308081744105212e-17,
	9.31640702156278810442e-01, +4.16443404202405501545e-17,
	9.35546825207466015151e-01, +1.30118208597957414219e-17,
	9.39453031256294313067e-01, -2.73329078384813978831e-17,
	9.43359306684466880633e-01, +2.34213317080329186189e-17,
	9.47265599403832925240e-01, +1.64787174804874376096e-17,
	9.51171831303272097280e-01, -5.19608290131499012691e-18,
	9.55078157821817819162e-01, -3.55655732205789973377e-17,
	9.58984314733904330552e-01, +2.08167721464587383804e-17,
	9.62890673563368548749e-01, -3.47196282614684091996e-18,
	9.66796889397209202599e-01, -3.68646834472641973845e-17,
	9.70703105402577870464e-01, -3.46741080768688339518e-18,
	9.74609432549493059916e-01, +4.59815262477439192212e-17,
	9.78515605458272208494e-01, +4.55314575239256827848e-17,
	9.82421868781228169176e-01, -7.81125916941897831347e-18,
	9.86328069075291691270e-01, +2.03756151780474671108e-17,
	9.90234290954603357804e-01, -1.34459704342291400472e-17,
	9.94140678026400825829e-01, +1.51853723695054007460e-17,
	9.98046859871555835930e-01, -1.30192603959800104012e-17,
	1.00390620677174124964e+00, -4.59612064174497329882e-17,
	1.01171870352813719762e+00, -8.15240500266534917862e-17,
	1.01953124249195581363e+00, +8.23992701475781147940e-17,
	1.02734376416341932625e+00, +3.12285100532704530558e-17,
	1.03515622745612212441e+00, -1.30102126111289954374e-17,
	1.04296875391232757302e+00, -5.98411668863345768713e-17,
	1.05078125612381079179e+00, +2.86092385482233513686e-17,
	1.05859373083501329127e+00, -1.99629445089045980987e-17,
	1.06640629369926420722e+00, +5.29146913030909915544e-17,
	1.07421873099453724087e+00, +1.03215750067325227876e-16,
	1.08203130153713389383e+00, +9.02119437341911886633e-17,
	1.08984380636443356494e+00, +5.20279899235795276503e-17,
	1.09765623567114678494e+00, +5.89831848250078530346e-17,
	1.10546881794632256835e+00, +8.84637769065325178267e-17,
	1.11328122080332803101e+00, -9.52945596521257445888e-18,
	1.12109370731673152477e+00, +6.76508070937778664414e-17,
	1.12890629673385323173e+00, +1.09293273709330152018e-16,
	1.13671876311508479596e+00, +6.93857055123051563526e-17,
	1.14453124902448255540e+00, +1.90884101504514799964e-17,
	1.15234370962035925778e+00, +2.77445041389798319283e-17,
	1.16015632664824774878e+00, -1.56219640974916719580e-17,
	1.16796882574835048096e+00, -6.41916614959750003398e-17,
	1.17578117546976446128e+00, -4.33646516505926807692e-17,
	1.18359379366561290325e+00, -3.81592925513563962830e-17,
	1.19140623316176763602e+00, -2.94933042768014998606e-17,
	1.19921874505777714681e+00, -6.24414291635134777031e-17,
	1.20703129712497547743e+00, +7.45864462262741272264e-17,
	1.21484381699651344810e+00, +2.77605192661478068583e-17,
	1.22265622522080108503e+00, -7.02510692107966549651e-17,
	1.23046876812908623222e+00, +3.72926223646188349771e-17,
	1.23828121162349247264e+00, +2.25589499406520817037e-17,
	1.24609367061498765850e+00, +8.49936894440066459379e-17,
	1.25390632896869380630e+00, +1.03951547464436102237e-17,
	1.26171883672277318489e+00, +3.29726222327549891110e-17,
	1.26953115904623170529e+00, +4.50988325359415469587e-17,
	1.27734366065794091583e+00, -7.54698737176954504580e-17,
	1.28515618829634958864e+00, +9.45429559881818373210e-17,
	1.29296865219151957405e+00, -7.28545609119748969407e-17,
	1.30078133591677369552e+00, -8.93435765146280229974e-17,
	1.30859380937538860579e+00, +8.15257059458102054505e-17,
	1.31640632026095638629e+00, +6.94634146076588147757e-18,
	1.32421883203139012508e+00, -7.89273138072167575458e-17,
	1.33203117868744680408e+00, -4.33846575007135446250e-17,
	1.33984368805730924556e+00, +9.62757795459879226228e-17,
	1.34765633902953085865e+00, +4.24924005902045168007e-17,
	1.35546876410436256677e+00, -1.08434195514460473932e-16,
	1.36328135909717129692e+00, -8.50172782472025005106e-17,
	1.37109365955226025768e+00, -7.11062720616292222673e-17,
};

__Float64 __cdecl __IEEE754_LNF64(__Float64 _X)
{
	__Float64 w, z, r, invc, logc, kd, hi, lo;
	uint64 ix, iz, tmp;
	uint32_t top;
	int k, i;

	__Float64 x = _X;
	ix = x.Bytes;
	top = ix >> 48; // extract top 16 bytes

	uint64 LO = 0x3FEE000000000000; // 1.0 - 0x1p-4 = 0.9375
	uint64 HI = 0x3FF1090000000000; // 1.0 + 0x1.09p-4 = 1.064697265625

	__Float64 NMC[] =
	{
		// Coefficients of taylor series of ln(x)
		// https://en.wikipedia.org/wiki/Mercator_series
		-0.50000000000000000000000000000000,
		+0.33333333333333333333333333333333,
		-0.25000000000000000000000000000000,
		+0.20000000000000000000000000000000,
		-0.16666666666666666666666666666667,
		+0.14285714285714285714285714285714,
		-0.12500000000000000000000000000000,
		+0.11111111111111111111111111111111,
		-0.10000000000000000000000000000000,
		+0.09090909090909090909090909090909,
		-0.08333333333333333333333333333333,
	};

	if (ix - LO < HI - LO)
	{
		if (x == 1.) { return 0; } // ln(1) = 0
		// relative error: 0x1.c04d76cp-63
		// in -0x1p-4 0x1.09p-4 (|log(1+x)| > 0x1p-4 outside the interval)
		r = x - 1.;
		// linear and square term need to be specially processed.
		w = r * 0x1p27;
		__Float64 rhi = r + w - w;
		__Float64 rlo = r - rhi;
		w = rhi * rhi * NMC[0];
		hi = r + w;
		lo = r - hi + w;
		lo += NMC[0] * rlo * (rhi + r);
		return hi + lo + r * r * r * (NMC[1] + r * (NMC[2] + r * (NMC[3] + r * (NMC[4] + r * (NMC[5] + r * (NMC[6] + r * (NMC[7] + r * (NMC[8] + r * (NMC[9] + r * (NMC[10]))))))))));
	}

	if (top - 0x0010 >= 0x7FF0 - 0x0010)
	{
		// x < 0x1p-1022 or inf or nan.
		if (ix * 2 == 0) { return __Float64::FromBytes(NEG_INF_DOUBLE); }
		// ln(inf) == inf
		if (ix == POS_INF_DOUBLE) { return __Float64::FromBytes(ix); }
		if ((top & 0x8000) || (top & 0x7FF0) == 0x7FF0) { return __Float64::FromBytes(BIG_NAN_DOUBLE); }
		// x is subnormal, normalize it.
		ix = __Float64(x * 0x1p52).Bytes;
		ix -= 52ULL << 52;
	}

	// x = 2^k z; where z is in range [OFF,2*OFF) and exact.
	// The range is split into N subintervals.
	// The ith subinterval contains z and c is near its center.

    uint64 OFFSET = 0x3FE6000000000000;
    tmp = ix - OFFSET;
    i = (tmp >> 45) % (1ull << 7);
	k = (int64)tmp >> 52; // arithmetic shift
	iz = ix - (tmp & 0xFFFULL << 52);
	invc = __Lnf64_table[2 * i];
	logc = __Lnf64_table[2 * i + 1];
	z = __Float64::FromBytes(iz);

	// log(x) = log1p(z/c-1) + log(c) + k*Ln2.
	// r ~= z/c - 1, |r| < 1/(2*N).

	// rounding error: 0x1p-55/N + 0x1p-66.
	r = (z - __Lnf64_table[256 + 2 * i] - __Lnf64_table[256 + 2 * i + 1]) * invc;
	kd = __Float64(k);

    __Float64 ln2hi = 0x1.62E42FEFA3800p-1;  // 0x3FE62E42FEFA3800, ln(2) without lower byte.
	__Float64 ln2lo = 0x1.EF35793C76730p-45; // ln(2) - ln2hi
	w = kd * ln2hi + logc;
	hi = w + r;
	lo = w - hi + r + kd * ln2lo;

	// ln(x) = lo + (log1p(r) - r) + hi.
	// Worst case error if | y | > 0x1p-4: 0.519 ULP(0.520 ULP without fma).
	// 0.5 + 2.06 / N + abs - poly - error * 2 ^ 56 ULP(+0.001 ULP without fma).
	return hi + lo + r * r * (NMC[0] + r * (NMC[1] + r * (NMC[2] + r * (NMC[3] + r * (NMC[4])))));
}

_END_EXTERN_C
_CSE_END
