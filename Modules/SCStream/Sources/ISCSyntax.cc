#include "CSE/SCStream/SCSBase.h"
#include "CSE/SCStream/LRParser.h"
#include "CSE/SCStream/ISCStream.h"
#include <stack>
#include <map>
#include <set>
#include <vector>

// Text-formating header
#if USE_FMTLIB
#include <fmt/format.h>
using namespace fmt;
#else
#include <format>
#endif

using namespace std;

_CSE_BEGIN
_SC_BEGIN

/*
 * ALGORITHM:
 *
 * The SpaceEngine sc grammar can be described as a combination
 * of keys, values and sub-tables. It can roughly written as
 * this syntax below:
 *
 *     <Key> [Values] [{<Sub-table>}]
 *
 * And this syntax can be repeated in a single file. So let this
 * grammar as G_sc(S), We can get these productions:
 *
 *     S -> KTS | Є
 *     T -> VT | V | N
 *
 * Where: K = Key, V = Value, N = Sub-tables, Є = Empty.
 *
 * Keys in this productions above are identifiers(i), then a
 * new production is get:
 *
 *     K -> i
 *
 * Then, value in this grammar can be a number, a string or a
 * boolean, which can all be viewed as expressions(E). It also
 * can be another complex types such as arrays and matrices,
 * for parsing these types we need extra productions.
 * value productions is showed below:
 *
 *     V -> E | (A) | {M}
 *     E -> n | s | b
 *     A -> E | ACE
 *     C -> , | Є
 *     M -> VCM | VC
 *
 * Contents of sub-tables are same as main table:
 *
 *     N -> {S}
 *
 * Now, all productions of G_sc(S) are found, Then we need to
 * recognize its type such as LL(1), LR(0), SLR(1) or LR(1).
 * Obviously, if we use LL(1), LR(0) or SLR(1) method, there
 * occurs conflicts. So this grammar is an LR(1) grammar at least.
 *
 * This program is originaly generated by GNU Bison and converted
 * to C++ format by StellarDX.
 *
 */

#if (SC_PARSER_LR == LALR1)
#include "LALR1.tbl"
#elif (SC_PARSER_LR == LR1)
#include "LR1.tbl"
#elif (SC_PARSER_LR == IELR1)
#include "IELR1.tbl"
#else
#error Invalid option.
#endif

// int __StelCXX_LR1_Parser(SharedPointer<TokenArrayType<char>> Symbols, SharedTablePointer& OutputTable)
// {

// }

// int __StelCXX_LR1_Parser_WCHAR(SharedPointer<TokenArrayType<wchar_t>> Symbols, WSharedTablePointer& OutputTable)
// {

// }

_SC_END
_CSE_END
