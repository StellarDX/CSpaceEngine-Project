/*
    角度sin/cos函数

    此设计基于OpenCV的快速三角函数与GLibC的4倍精度三角函数整理而来。角度三角函数以
    360为一个周期，此方法先把输入的角度取360的余数，然后再以45为单位分区，这样就只
    需要设计0 - 45或-45 - +45范围的算法，其他的角度可以通过诱导公式调整到这一范围。
    -45 - +45的算法是，先判断角度的绝对值是不是在大概0~8.5范围内，如果是就直接使用
    16和17阶切比雪夫多项式(即泰勒展开9项)拟合。其他的角度则先把角度分解为高位和低位，
    其中高位的值是把360分成256等分后，预计算这部分的三角函数值并分解成前113位二进制
    小数和后113位补偿精度(尽可能减少因大吃小导致的掉精度)，并按顺序存入一张表，低位
    部分则使用10和11阶切比雪夫多项式近似，最后把两部分用三角恒等式加起来即可得到结果。
*/

// OpenCV license:
// It is subject to the license terms in the LICENSE file found in the
// top-level directory of this distribution and at
// http://opencv.org/license.html.

// GLibc license:
/* 
    Quad-precision floating point sine and cosine on <-pi/4,pi/4>.
    Copyright (C) 1999-2025 Free Software Foundation, Inc.
    This file is part of the GNU C Library.

    The GNU C Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    The GNU C Library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library; if not, see
    <https://www.gnu.org/licenses/>.  
*/

#include "CSE/Base/CSEBase.h"
#include "CSE/Base/Algorithms.h"
#include "CSE/Base/MathFuncs.h"

_CSE_BEGIN

/*
    此表包含n*(360/256)，n=0..33对应正弦函数值的前113位二进制
    小数和接下来113位补偿精度，余弦函数同理。
    使用 gmpy2 计算。
 */
const float64 __SinCos128F_Table[132]
{
    // x = 0.0000000000000000000000000000000000000 00000000000000000000000000000000
    // sin(x) = 0.00000000000000000000000000 00000000000000000000000000 00000000000000000000000
    0x0.00000000000000000000000000p0L, 0x0.00000000000000000000000000p-104L,
    // cos(x) = 1.00000000000000000000000000 00000000000000000000000000 00000000000000000000000
    0x0.10000000000000000000000000p0L, 0x0.00000000000000000000000000p-104L,

    // x = 1.4062500000000000000000000000000000000 3FFF6800000000000000000000000000
    // sin(x) = 0.0648557DE8D99F7E4E29CF6E5F ED067962652F9E1AA508AC0CF3 1AC036DE81C6A8390BC3365
    0x0.0648557DE8D99F7E4E29CF6E5Fp0L, 0x0.ED067962652F9E1AA508AC0CF3p-104L,
    // cos(x) = 0.FFEC4304266865D95657552366 961732568FB69282182F32EF6F 30DA8FE307E8AB5DC1A4197
    0x0.FFEC4304266865D95657552366p0L, 0x0.961732568FB69282182F32EF6Fp-104L,

    // x = 2.8125000000000000000000000000000000000 40006800000000000000000000000000
    // sin(x) = 0.0C8FB2F886EC09F376A17954B2 B7C5171216769FCDA0D0EBF36F C97B1FEF1FDEA8902B24FDD
    0x0.0C8FB2F886EC09F376A17954B2p0L, 0x0.B7C5171216769FCDA0D0EBF36Fp-104L,
    // cos(x) = 0.FFB10F1BCB6BEF1D421E8EDAAF 59453DCF53E4BAA403250B5750 700A6DF265241BF58F6A90D
    0x0.FFB10F1BCB6BEF1D421E8EDAAFp0L, 0x0.59453DCF53E4BAA403250B5750p-104L,

    // x = 4.2187500000000000000000000000000000000 40010E00000000000000000000000000
    // sin(x) = 0.12D52092CE19F5CCBEEEAE8129 A786B8825261EDB7445E115B93 892877537A4083D904A423E
    0x0.12D52092CE19F5CCBEEEAE8129p0L, 0x0.A786B8825261EDB7445E115B93p-104L,
    // cos(x) = 0.FF4E6D680C41D0A90F668633F1 AB858991CF862E7FAD71EE964A AD96D95AE9FB3B7C57BC5C7
    0x0.FF4E6D680C41D0A90F668633F1p0L, 0x0.AB858991CF862E7FAD71EE964Ap-104L,

    // x = 5.6250000000000000000000000000000000000 40016800000000000000000000000000
    // sin(x) = 0.1917A6BC29B42BE1D8E72D9129 77EE7121030810A8DDD093D9AB E105FE0FBEA301AF208BBD6
    0x0.1917A6BC29B42BE1D8E72D9129p0L, 0x0.77EE7121030810A8DDD093D9ABp-104L,
    // cos(x) = 0.FEC46D1E89292CF041390EFDC7 26E9EF5A2C976D196A3567B268 1B468EFBA361A0E9EE7A852
    0x0.FEC46D1E89292CF041390EFDC7p0L, 0x0.26E9EF5A2C976D196A3567B268p-104L,

    // x = 7.0312500000000000000000000000000000000 4001C200000000000000000000000000
    // sin(x) = 0.1F564E56A9730E344E08E535CA DAF146E2427477A6ECF31EF0C8 A6BF13A12290DAFC53BDB0F
    0x0.1F564E56A9730E344E08E535CAp0L, 0x0.DAF146E2427477A6ECF31EF0C8p-104L,
    // cos(x) = 0.FE1323870CFE9A3D90CD1D959D B674EECC9D5D787E81F86792AE 1E5D881F153B300E707E9A9
    0x0.FE1323870CFE9A3D90CD1D959Dp0L, 0x0.B674EECC9D5D787E81F86792AEp-104L,

    // x = 8.4375000000000000000000000000000000000 40020E00000000000000000000000000
    // sin(x) = 0.259020DD1CC27444C002A26847 81F07F9FE14048BE786E103C6F 72706B194B888E8799E6913
    0x0.259020DD1CC27444C002A26847p0L, 0x0.81F07F9FE14048BE786E103C6Fp-104L,
    // cos(x) = 0.FD3AABF84528B50BEAE6BD951C 1DABBDA19702D6D140D72962B8 17621FF0F760673171E6A65
    0x0.FD3AABF84528B50BEAE6BD951Cp0L, 0x0.1DABBDA19702D6D140D72962B8p-104L,

    // x = 9.8437500000000000000000000000000000000 40023B00000000000000000000000000
    // sin(x) = 0.2BC42889167F8CA98FFBBCEED6 2C7C4323D5A2B8DC1E0341DC32 FB8507A753B5712BEB01D32
    0x0.2BC42889167F8CA98FFBBCEED6p0L, 0x0.2C7C4323D5A2B8DC1E0341DC32p-104L,
    // cos(x) = 0.FC3B27D38A5D49AB256778FFCB 5C1769246DDC4E63F59390B859 505A0B301225184B1D6FCCF
    0x0.FC3B27D38A5D49AB256778FFCBp0L, 0x0.5C1769246DDC4E63F59390B859p-104L,

    // x = 11.2500000000000000000000000000000000000 40026800000000000000000000000000
    // sin(x) = 0.31F17078D34C156C9732300393 F33613F394E58D12972F1D3943 8767895414C1A28FBDBE7EB
    0x0.31F17078D34C156C9732300393p0L, 0x0.F33613F394E58D12972F1D3943p-104L,
    // cos(x) = 0.FB14BE7FBAE581562172A361FD 2A722EC5F40E3FD8F18AE1B199 7321B48E8B1B947A5373353
    0x0.FB14BE7FBAE581562172A361FDp0L, 0x0.2A722EC5F40E3FD8F18AE1B199p-104L,

    // x = 12.6562500000000000000000000000000000000 40029500000000000000000000000000
    // sin(x) = 0.381704D4FC9EC5F943AF186B79 B2A0F32C9B801C691E71BB813B 716E71055E67276234F6F3E
    0x0.381704D4FC9EC5F943AF186B79p0L, 0x0.B2A0F32C9B801C691E71BB813Bp-104L,
    // cos(x) = 0.F9C79D63272C46284504AE08D1 9B298079B567A67CDE8B6161E6 3B20928C47AFA87CF32CE08
    0x0.F9C79D63272C46284504AE08D1p0L, 0x0.9B298079B567A67CDE8B6161E6p-104L,

    // x = 14.0625000000000000000000000000000000000 4002C200000000000000000000000000
    // sin(x) = 0.3E33F2F642BE355E90887712E9 DC96635580085F9C2247B376CE EE5DEE6D2D54A9BF1FAE55E
    0x0.3E33F2F642BE355E90887712E9p0L, 0x0.DC96635580085F9C2247B376CEp-104L,
    // cos(x) = 0.F853F7DC9186B952C7ADC6B498 8891BA95A1ACB343363FB26D19 32845F3813DD18DA934F3FC
    0x0.F853F7DC9186B952C7ADC6B498p0L, 0x0.8891BA95A1ACB343363FB26D19p-104L,

    // x = 15.4687500000000000000000000000000000000 4002EF00000000000000000000000000
    // sin(x) = 0.4447498AC7D9DD824C20AB7AA9 9A2182F735312B47773C266A6E 3A60FDAE388E2098BB3F685
    0x0.4447498AC7D9DD824C20AB7AA9p0L, 0x0.9A2182F735312B47773C266A6Ep-104L,
    // cos(x) = 0.F6BA073B424B19E82C791F59CC 1FFC22B06854A7D3139B87F2F6 8677A56EFB23AFDC40732A1
    0x0.F6BA073B424B19E82C791F59CCp0L, 0x0.1FFC22B06854A7D3139B87F2F6p-104L,

    // x = 16.8750000000000000000000000000000000000 40030E00000000000000000000000000
    // sin(x) = 0.4A5018BB567C16A2D725D3B9ED 35FBA9C70534171BF68A811C56 1EA3E50849C296E8A937421
    0x0.4A5018BB567C16A2D725D3B9EDp0L, 0x0.35FBA9C70534171BF68A811C56p-104L,
    // cos(x) = 0.F4FA0AB6316ED2EC163C5C7F03 B718C55EE4B09989A117288E77 EE63670FA090D5FD8A1CAFB
    0x0.F4FA0AB6316ED2EC163C5C7F03p0L, 0x0.B718C55EE4B09989A117288E77p-104L,

    // x = 18.2812500000000000000000000000000000000 40032480000000000000000000000000
    // sin(x) = 0.504D72505D98050C97C4AFA251 81E6057B0A0A42F45C41BD6489 5285F2B7E95016AF5C057A2
    0x0.504D72505D98050C97C4AFA251p0L, 0x0.81E6057B0A0A42F45C41BD6489p-104L,
    // cos(x) = 0.F314476247088F74A5486BDC45 5D56A26CC90B7D06C506D8511A ACDCD3B8EB99C3D4240D5D9
    0x0.F314476247088F74A5486BDC45p0L, 0x0.5D56A26CC90B7D06C506D8511Ap-104L,

    // x = 19.6875000000000000000000000000000000000 40033B00000000000000000000000000
    // sin(x) = 0.563E69D6AC7F73F8408FCA9CC2 77FC1F1A157CED9B54E454E1E5 B755B82915587D9D0AF68FC
    0x0.563E69D6AC7F73F8408FCA9CC2p0L, 0x0.77FC1F1A157CED9B54E454E1E5p-104L,
    // cos(x) = 0.F1090827B43725FD67127DB35B 28731589DAB2E0FE03A229894C 0E9AAC77BFE4D2CFECDDD6B
    0x0.F1090827B43725FD67127DB35Bp0L, 0x0.28731589DAB2E0FE03A229894Cp-104L,

    // x = 21.0937500000000000000000000000000000000 40035180000000000000000000000000
    // sin(x) = 0.5C2214C3E9167ABB4E61F79B3A 36F1DBEF75477F5DBB812B2B7D 0EA00521B3D9E83C1FFDA3E
    0x0.5C2214C3E9167ABB4E61F79B3Ap0L, 0x0.36F1DBEF75477F5DBB812B2B7Dp-104L,
    // cos(x) = 0.EED89DB66611E30786F8C20FB6 64B01AFC4FACDFD3D64E3FB6A4 DEC498E3FBC30E0EA289950
    0x0.EED89DB66611E30786F8C20FB6p0L, 0x0.64B01AFC4FACDFD3D64E3FB6A4p-104L,

    // x = 22.5000000000000000000000000000000000000 40036800000000000000000000000000
    // sin(x) = 0.61F78A9ABAA58B4698916152CF 7EEE1BBDF1F5B4AB3DE24C3A3C 159062718F716D12D59BBA9
    0x0.61F78A9ABAA58B4698916152CFp0L, 0x0.7EEE1BBDF1F5B4AB3DE24C3A3Cp-104L,
    // cos(x) = 0.EC835E79946A31457E610231AC 1D6180F0A83D3CD0DAE9B5DB89 7C2384083746A6340CB65C4
    0x0.EC835E79946A31457E610231ACp0L, 0x0.1D6180F0A83D3CD0DAE9B5DB89p-104L,

    // x = 23.9062500000000000000000000000000000000 40037E80000000000000000000000000
    // sin(x) = 0.67BDE50EA3B628B6D409485EDD 56B17216FEC586E008E2C976C8 C1D21CFB8D44128CFED9C6A
    0x0.67BDE50EA3B628B6D409485EDDp0L, 0x0.56B17216FEC586E008E2C976C8p-104L,
    // cos(x) = 0.EA09A68A6E49CD6215AD45B4A1 B5E8233D5705F10A9A7F6F2397 EA24D504942723CB86A3C7B
    0x0.EA09A68A6E49CD6215AD45B4A1p0L, 0x0.B5E8233D5705F10A9A7F6F2397p-104L,

    // x = 25.3125000000000000000000000000000000000 40039500000000000000000000000000
    // sin(x) = 0.6D744027857300AD9B165CBA0C 171818041E72879F2CC28A9B2A FFA69C693D135E7A1201472
    0x0.6D744027857300AD9B165CBA0Cp0L, 0x0.171818041E72879F2CC28A9B2Ap-104L,
    // cos(x) = 0.E76BD7A1E63B9786125129529D 48A92F2F1BB3282663E45109DE 14EFEA575873C924411252C
    0x0.E76BD7A1E63B9786125129529Dp0L, 0x0.48A92F2F1BB3282663E45109DEp-104L,

    // x = 26.7187500000000000000000000000000000000 4003AB80000000000000000000000000
    // sin(x) = 0.7319BA64C711785A1439670DFE 3D68E65A5C9453FA24A5344BF6 E0E57669D6386F830A878EE
    0x0.7319BA64C711785A1439670DFEp0L, 0x0.3D68E65A5C9453FA24A5344BF6p-104L,
    // cos(x) = 0.E4AA5909A08FA7B4122785AE67 F5515C8743F3FE219A6A8F2790 2AA36084A51BB858FEC8202
    0x0.E4AA5909A08FA7B4122785AE67p0L, 0x0.F5515C8743F3FE219A6A8F2790p-104L,

    // x = 28.1250000000000000000000000000000000000 4003C200000000000000000000000000
    // sin(x) = 0.78AD74E01BD8EC78362474F1A1 05878ED68AAD829DACA0D0CA81 9CED385CB98A1AC961F0B07
    0x0.78AD74E01BD8EC78362474F1A1p0L, 0x0.05878ED68AAD829DACA0D0CA81p-104L,
    // cos(x) = 0.E1C5978C05ED8691F4E8A8372F 8C580FFDEA3FF0DC05332782C4 FE35F8F29CEAF775E41EC00
    0x0.E1C5978C05ED8691F4E8A8372Fp0L, 0x0.8C580FFDEA3FF0DC05332782C4p-104L,

    // x = 29.5312500000000000000000000000000000000 4003D880000000000000000000000000
    // sin(x) = 0.7E2E936FE26AE7ED13E03E4889 485C68B55AE104D717A04BD37A 87FA45CE838BA8B8AC3A1AA
    0x0.7E2E936FE26AE7ED13E03E4889p0L, 0x0.485C68B55AE104D717A04BD37Ap-104L,
    // cos(x) = 0.DEBE05637CA94CFB4B19AA71FE C3AE6CD4A257966E11637986A3 422B18230D41A01D809BEB9
    0x0.DEBE05637CA94CFB4B19AA71FEp0L, 0x0.C3AE6CD4A257966E11637986A3p-104L,

    // x = 30.9375000000000000000000000000000000000 4003EF00000000000000000000000000
    // sin(x) = 0.839C3CC917FF6CB4BFD79717F2 880ABED6BC7FE57653AEC32D3B FE70D9AB409A718FB60D736
    0x0.839C3CC917FF6CB4BFD79717F2p0L, 0x0.880ABED6BC7FE57653AEC32D3Bp-104L,
    // cos(x) = 0.DB941A28CB71EC872C19B63253 DA43FBB67292CBDF4CB882F8AE 9C38D38A7789A71857FD6A6
    0x0.DB941A28CB71EC872C19B63253p0L, 0x0.DA43FBB67292CBDF4CB882F8AEp-104L,

    // x = 32.3437500000000000000000000000000000000 400402C0000000000000000000000000
    // sin(x) = 0.88F59AA0DA591421B892CA8361 D8C84C1DDC902C4A28D8385C00 D180C7655A29DD549BB352A
    0x0.88F59AA0DA591421B892CA8361p0L, 0x0.D8C84C1DDC902C4A28D8385C00p-104L,
    // cos(x) = 0.D84852C0A80FFCDB24B9FE0066 3574A3DD2C2B52901FE50017B1 5CB0A701425BF20994C8B2E
    0x0.D84852C0A80FFCDB24B9FE0066p0L, 0x0.3574A3DD2C2B52901FE50017B1p-104L,

    // x = 33.7500000000000000000000000000000000000 40040E00000000000000000000000000
    // sin(x) = 0.8E39D9CD73464364BBA4CFECBF F548677CA7D749ADFBA33ECA99 6068C296FD797F9152CBA72
    0x0.8E39D9CD73464364BBA4CFECBFp0L, 0x0.F548677CA7D749ADFBA33ECA99p-104L,
    // cos(x) = 0.D4DB3148750D1819F630E8B6DA C83E68B4691D2F99EC9EAAAC08 E58A7CD395443F46DE4FBAF
    0x0.D4DB3148750D1819F630E8B6DAp0L, 0x0.C83E68B4691D2F99EC9EAAAC08p-104L,

    // x = 35.1562500000000000000000000000000000000 40041940000000000000000000000000
    // sin(x) = 0.93682A66E896F544B17821911E 71C16E44B562FE29A53A667AD1 253F5EC14FF04F95EC5747E
    0x0.93682A66E896F544B17821911Ep0L, 0x0.71C16E44B562FE29A53A667AD1p-104L,
    // cos(x) = 0.D14D3D02313C0EED744FEA20E8 ABEF91E386CBDA4F76D55939D9 56BCFE9A5D9A18E858D2251
    0x0.D14D3D02313C0EED744FEA20E8p0L, 0x0.ABEF91E386CBDA4F76D55939D9p-104L,

    // x = 36.5625000000000000000000000000000000000 40042480000000000000000000000000
    // sin(x) = 0.987FBFE70B81A70819CEC845AC 87A5C66B714DF5A5E72D4F1D9C E3A2743A180401ACD947A16
    0x0.987FBFE70B81A70819CEC845ACp0L, 0x0.87A5C66B714DF5A5E72D4F1D9Cp-104L,
    // cos(x) = 0.CD9F023F9C3A059E23AF31DB71 79A4A99D02F0E6CAA17D3DC881 A55027476AF76C2162F37C4
    0x0.CD9F023F9C3A059E23AF31DB71p0L, 0x0.79A4A99D02F0E6CAA17D3DC881p-104L,

    // x = 37.9687500000000000000000000000000000000 40042FC0000000000000000000000000
    // sin(x) = 0.9D7FD1490285C9E3E25E395496 38AE6787424855DAF5D9F321F5 F9A3921B151EC54B364F155
    0x0.9D7FD1490285C9E3E25E395496p0L, 0x0.38AE6787424855DAF5D9F321F5p-104L,
    // cos(x) = 0.C9D1124C931FDA7A8335241BE1 6932254BFC4D9ABFEB5F9F3E33 F4230B848C8AA0FA0954D3D
    0x0.C9D1124C931FDA7A8335241BE1p0L, 0x0.6932254BFC4D9ABFEB5F9F3E33p-104L,

    // x = 39.3750000000000000000000000000000000000 40043B00000000000000000000000000
    // sin(x) = 0.A267992848EEB0C03B5167EE35 9A234DC381700BDF75760004C7 B378B215B01DA7DE0615A75
    0x0.A267992848EEB0C03B5167EE35p0L, 0x0.9A234DC381700BDF75760004C7p-104L,
    // cos(x) = 0.C5E40358A8BA05A743DA25D992 67326AD47437D3710B81D79BCD AEF02B673F05810C85A6661
    0x0.C5E40358A8BA05A743DA25D992p0L, 0x0.67326AD47437D3710B81D79BCDp-104L,

    // x = 40.7812500000000000000000000000000000000 40044640000000000000000000000000
    // sin(x) = 0.A73655DF1F2F489E149F6E7599 3468A29AAB00F488EEA6AD3D51 7247A54A9EA8E237EEAA1B3
    0x0.A73655DF1F2F489E149F6E7599p0L, 0x0.3468A29AAB00F488EEA6AD3D51p-104L,
    // cos(x) = 0.C1D8705FFCBB6E90BDF0715CB8 B20BD6D785C0CFC7C2E7A2164C 59C4FC989F354203B9BFF49
    0x0.C1D8705FFCBB6E90BDF0715CB8p0L, 0x0.B20BD6D785C0CFC7C2E7A2164Cp-104L,

    // x = 42.1875000000000000000000000000000000000 40045180000000000000000000000000
    // sin(x) = 0.ABEB49A46764FD151BECDA8089 C1A94C2FD0F3859ABECFF46474 2CA428C80C163C2EA3BE7E7
    0x0.ABEB49A46764FD151BECDA8089p0L, 0x0.C1A94C2FD0F3859ABECFF46474p-104L,
    // cos(x) = 0.BDAEF913557D76F0AC85320F52 8D6D5C9C677149ABC2CAAFE0BD 35686BED05F06A8E73990FF
    0x0.BDAEF913557D76F0AC85320F52p0L, 0x0.8D6D5C9C677149ABC2CAAFE0BDp-104L,

    // x = 43.5937500000000000000000000000000000000 40045CC0000000000000000000000000
    // sin(x) = 0.B085BAA8E966F6DAE4CAD00D5C 94BCD1A642438DCE55E433C057 0800FB967A6BFEBC57D474C
    0x0.B085BAA8E966F6DAE4CAD00D5Cp0L, 0x0.94BCD1A642438DCE55E433C057p-104L,
    // cos(x) = 0.B96841BF7FFCB21A9DE1E3B22B 8BF4DB43B1297EFF842A9FD1AB 4F851F6104B5F052B35906E
    0x0.B96841BF7FFCB21A9DE1E3B22Bp0L, 0x0.8BF4DB43B1297EFF842A9FD1ABp-104L,

    // x = 45.0000000000000000000000000000000000000 40046800000000000000000000000000
    // sin(x) = 0.B504F333F9DE6484597D89B375 4ABE9F1D6F60BA893BA84CED17 AC85833399154AFC83043AB
    0x0.B504F333F9DE6484597D89B375p0L, 0x0.4ABE9F1D6F60BA893BA84CED17p-104L,
    // cos(x) = 0.B504F333F9DE6484597D89B375 4ABE9F1D6F60BA893BA84CED17 AC85833399154AFC83043AB
    0x0.B504F333F9DE6484597D89B375p0L, 0x0.4ABE9F1D6F60BA893BA84CED17p-104L,
};

#define SINCOS_SIN_HI 0
#define SINCOS_SIN_LO 1
#define SINCOS_COS_HI 2
#define SINCOS_COS_LO 3

#define SINCOS_TABSIZE 132
#define SINCOS_BOUNDARY 8.4375
#define SINCOS_SETV(p, x) if (p) {*p = (x);}

void __cdecl __CV_CHEBYSHEV_SINCOS(__Float64 _X, __Float64* _SIN, __Float64* _COS)
{
    __Float64 x = _X;
    __Float64 z, sin_l, cos_l_m1;
    int64_t ix;
    uint32_t tix, index;

    ix = x.Bytes;
    tix = ((uint64_t)ix) >> 32;

    uint64 N = ((SINCOS_TABSIZE / 4) - 1) * 8;
    __Float64 absx = abs(x);

    if (absx > 45)
    {
        throw std::logic_error("argument out of range.");
    }

    if (absx.x < SINCOS_BOUNDARY)
    {
        // 参数足够小，可以近似地用16阶（和17阶）切比雪夫多项式表示。
        if (tix < 0x3fc60000) // |x| < 2^-57
        {
            if (!(int(x))) // 下溢出
            {
                SINCOS_SETV(_SIN, x);
                SINCOS_SETV(_COS, 1);
                return;
            }
        }

        static const __Float64
            SIN0 = +0.01745329251994329576923690768488612713L,
            SIN1 = -8.86096155701298015988692131547250663E-07L,
            SIN2 = +1.34960162316325501059299140528168169E-11L,
            SIN3 = -9.78838486161772760953596800220414947E-17L,
            SIN4 = +4.14126741725732068529449587689393809E-22L,
            SIN5 = -1.14682017753790161396412139175844787E-27L,
            SIN6 = +2.23936797077519653778917540987515320E-33L,
            SIN7 = -3.24833568195494208699804185828671924E-39L,
            SIN8 = +3.63786630161107701248028854135586445E-45L;

        // cos x ~ ONE + x^2 ( COS1 + COS2 * x^2 + ... + COS7 * x^12 + COS8 * x^14 )
        // x in (0 - ~8.5 degrees)
        static const __Float64
            COS0 = +1.00000000000000000000000000000000000000L,
            COS1 = -0.00015230870989335429967337177468944776L,
            COS2 = +3.86632385156299365396377635081292832E-09L,
            COS3 = -3.92583198574309488222618074857610956E-14L,
            COS4 = +2.13549430359498596941150574925128862E-19L,
            COS5 = -7.22787516367020866486118644631005761E-25L,
            COS6 = +1.66798233552852505829208731366811797E-30L,
            COS7 = -2.79173887526652390688195700043980315E-36L,
            COS8 = +3.54338455375806845799565958364591764E-42L;

        z = x * x;
        SINCOS_SETV(_SIN, SIN0.x * x + (x * (z * (SIN1.x + z * (SIN2.x + z * (SIN3.x + z * (SIN4.x +
            z * (SIN5.x + z * (SIN6.x + z * (SIN7.x + z * SIN8.x))))))))));
        SINCOS_SETV(_COS, COS0.x + (z * (COS1.x + z * (COS2.x + z * (COS3.x + z * (COS4.x +
            z * (COS5.x + z * (COS6.x + z * (COS7.x + z * COS8.x)))))))));
    }

    /*
        为了避免使用过大的多项式，此处将x分解为高位h和低位l。如果把360等分为256份，
        则h在0-45范围内有33个可能的取值。我们从预先计算的表格中查找出cos(h)和sin(h)，
        并使用10(11)阶切比雪夫多项式计算cos(l)和sin(l)，最终通过三角恒等式：
            sin(h+l) = sin(h)cos(l) + cos(h)sin(l)
            cos(h+l) = cos(h)cos(l) - sin(h)sin(l)
        以得到最终结果。
    */
    __Float64 k1 = N / 360.;
    __Float64 t = absx * k1;
    int64 it = ::llround(t);
    t -= it;
    index = (it & (N - 1)) * 4;

    // sin x ~ ONE * x + x^3 ( SSIN1 + SSIN2 * x^2 + ... + SSIN4 * x^6 + SSIN5 * x^8 )
    static const __Float64
        SSIN0 = +0.02454369260617025967548940143187111628L,
        SSIN1 = -2.46415747644899846517851472434213918E-06L,
        SSIN2 = +7.42195418534493494038521773093175353E-11L,
        SSIN3 = -1.06450764526896093700212621432761752E-15L,
        SSIN4 = +8.90627487245331372193506814591142549E-21L,
        SSIN5 = -4.87734206756463019345962798607956083E-26L;

    // cos x ~ ONE + x^2 ( SCOS1 + SCOS2 * x^2 + ... + SCOS4 * x^6 + SCOS5 * x^8 )
    static const __Float64
        SCOS1 = -0.000301196423373088336756423675533329808L,
        SCOS2 = +1.51198809087901123545505622849962847E-08L,
        SCOS3 = -3.03603603436974821278296254343009239E-13L,
        SCOS4 = +3.26586855279993876963017463942819704E-18L,
        SCOS5 = -2.18592872735552368546859383387098483E-23L;

    z = t * t;
    sin_l = t * (SSIN0.x + z * (SSIN1.x + z * (SSIN2.x + z * (SSIN3.x + z * (SSIN4.x + z * SSIN5.x)))));
    cos_l_m1 = z * (SCOS1.x + z * (SCOS2.x + z * (SCOS3.x + z * (SCOS4.x + z * SCOS5.x))));

    SINCOS_SETV(_SIN, ((ix < 0) ? -1 : 1) *
        (__SinCos128F_Table [index + SINCOS_SIN_HI]
        + (__SinCos128F_Table [index + SINCOS_SIN_LO]
        + (__SinCos128F_Table [index + SINCOS_SIN_HI] * cos_l_m1)
        + (__SinCos128F_Table [index + SINCOS_COS_HI] * sin_l))))
    SINCOS_SETV(_COS,
        __SinCos128F_Table [index + SINCOS_COS_HI]
        + (__SinCos128F_Table [index + SINCOS_COS_LO]
        - (__SinCos128F_Table [index + SINCOS_SIN_HI] * sin_l
        - __SinCos128F_Table [index + SINCOS_COS_HI] * cos_l_m1)))
}

__Float64 __cdecl __CV_SIN128F_C64F(__Float64 _X)
{
    __Float64 absx = abs(_X);
    __Float64 sinx;
    int neg = std::signbit(_X) ? -1 : 1;

    /* |x| ~< 45 */
    if (absx.x <= 45)
    {
        __CV_CHEBYSHEV_SINCOS(_X, &sinx, nullptr);
        return sinx;
    }

    /* sin(Inf or NaN) = NaN */
    else if (isinf(_X) || isnan(_X))
    {
        return __Float64::FromBytes(BIG_NAN_DOUBLE);
    }

    /* 将范围缩减到0-360 */
    __Float64 tx = mod(absx, 360);
    // sin(x)
    if (tx <= 45)
    {
        __CV_CHEBYSHEV_SINCOS(tx, &sinx, nullptr);
    }
    // sin(x) = cos(90 - x)
    else if (tx > 45 && tx <= 135)
    {
        __CV_CHEBYSHEV_SINCOS(90 - tx, nullptr, &sinx);
    }
    // sin(x) = sin(180 - x)
    else if (tx > 135 && tx <= 225)
    {
        __CV_CHEBYSHEV_SINCOS(180 - tx, &sinx, nullptr);
    }
    // sin(x) = -cos(270 - x)
    else if (tx > 225 && tx <= 315)
    {
        __CV_CHEBYSHEV_SINCOS(270 - tx, nullptr, &sinx);
        sinx *= -1;
    }
    // sin(x) = -sin(360 - x)
    else
    {
        __CV_CHEBYSHEV_SINCOS(360 - tx, &sinx, nullptr);
        sinx *= -1;
    }
    return neg * sinx;
}

__Float64 __cdecl __CV_COS128F_C64F(__Float64 _X)
{
    __Float64 absx = abs(_X);
    __Float64 cosx;

    /* |x| ~< 45 */
    if (absx.x <= 45)
    {
        __CV_CHEBYSHEV_SINCOS(_X, nullptr, &cosx);
        return cosx;
    }

    /* cos(Inf or NaN) = NaN */
    else if (isinf(_X) || isnan(_X))
    {
        return __Float64::FromBytes(BIG_NAN_DOUBLE);
    }

    /* 将范围缩减到0-360 */
    __Float64 tx = mod(absx, 360);
    // cos(x)
    if (tx <= 45)
    {
        __CV_CHEBYSHEV_SINCOS(tx, nullptr, &cosx);
    }
    // cos(x) = sin(90 - x)
    else if (tx > 45 && tx <= 135)
    {
        __CV_CHEBYSHEV_SINCOS(90 - tx, &cosx, nullptr);
    }
    // cos(x) = -cos(180 - x)
    else if (tx > 135 && tx <= 225)
    {
        __CV_CHEBYSHEV_SINCOS(180 - tx, nullptr, &cosx);
        cosx *= -1;
    }
    // cos(x) = -sin(270 - x)
    else if (tx > 225 && tx <= 315)
    {
        __CV_CHEBYSHEV_SINCOS(270 - tx, &cosx, nullptr);
        cosx *= -1;
    }
    // sin(x) = -sin(360 - x)
    else
    {
        __CV_CHEBYSHEV_SINCOS(360 - tx, nullptr, &cosx);
    }
    return cosx;
}

_CSE_END

#if 0 // sin and cos test function generated by Deepseek
#include <iostream>
#include <cmath>
#include <iomanip>

#include <CSE/Base.h>

using namespace cse;

// 比较函数
void compare_sin(__Float64 x)
{
    __Float64 custom = __CV_SIN128F_C64F(x);
    __Float64 stdlib = std::sin(x * M_PI / 180.0); // 转换为弧度

    std::cout << std::fixed << std::setprecision(20);
    std::cout << "x = " << x << " degrees\n";
    std::cout << "  Custom sin: " << custom << "\n";
    std::cout << "  Stdlib sin: " << stdlib << "\n";
    std::cout << "  Difference: " << std::abs(custom - stdlib) << "\n\n";
}

int main()
{
    // 测试用例
    std::cout << "=== Testing __CV_SIN128F_C64F vs std::sin ===\n\n";

    // 1. 小角度测试
    std::cout << "=== Small angles ===\n";
    compare_sin(0.0);
    compare_sin(1.0);
    compare_sin(30.0);
    compare_sin(45.0);
    compare_cos(60.0);
    compare_sin(-30.0);

    // 2. 边界条件测试
    std::cout << "=== Boundary conditions ===\n";
    compare_sin(45.0);
    compare_sin(90.0);
    compare_sin(135.0);
    compare_sin(180.0);
    compare_sin(225.0);
    compare_sin(270.0);
    compare_sin(315.0);
    compare_sin(360.0);

    // 3. 大角度测试
    std::cout << "=== Large angles ===\n";
    compare_sin(500.0);
    compare_sin(720.0);
    compare_sin(1000.0);
    compare_sin(-1000.0);

    // 4. 特殊值测试
    std::cout << "=== Special values ===\n";
    compare_sin(NAN);
    compare_sin(INFINITY);
    compare_sin(-INFINITY);

    // 5. 随机角度测试
    std::cout << "=== Random angles ===\n";
    compare_sin(123.456);
    compare_sin(789.012);
    compare_sin(-345.678);
}
#endif
