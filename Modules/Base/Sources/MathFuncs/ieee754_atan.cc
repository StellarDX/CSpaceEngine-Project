// Fast arctan function for double and quaduple precision
// By Stephen L. Moshier, and conversion to degree math by StellarDX

#include "CSE/Base/CSEBase.h"
#include "CSE/Base/MathFuncs.h"

_CSE_BEGIN

_EXTERN_C

/*
    Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, see
    <https://www.gnu.org/licenses/>.
*/

// Numbers-got nerfed code. (数值受害的代码)

const __Float64 __Arctan128F_table_deg[84]
{
    00.0000000000000000000000000000000000000000L,
    07.1250163489017975619533008412068447490521L,
    14.0362434679264785828923201591634243209744L,
    20.5560452195834643082936127473437989791071L,
    26.5650511770779893515721937204532946712042L,
    32.0053832080834955607906457504046593579533L,
    36.8698976458440212968556125590934106575916L,
    41.1859251657096458050885863671792182784213L,
    45.0000000000000000000000000000000000000000L,
    48.3664606634298011218170598073969592388696L,
    51.3401917459099093959941376648274946222520L,
    53.9726266148963932572877357378046855130586L,
    56.3099324740202130864745054383398605797436L,
    58.3924977537510977502258106270963068609151L,
    60.2551187030577762650976882821134340914606L,
    61.9275130641470428342153596816731513580511L,
    63.4349488229220106484278062795467053287958L,
    64.7988763545249293116717660584366694053642L,
    66.0375110254218167601281706089277521020895L,
    67.1663458220824572860367076000700136633829L,
    68.1985905136481882297551339130563354323346L,
    69.1455419604216531611236876277810654402749L,
    70.0168934781000216185478097317031829447158L,
    70.8209919741892798907393496676340966291800L,
    71.5650511770779893515721937204532946712042L,
    72.2553283749430678841321949616009548382570L,
    72.8972710309476280395678768212887251445330L,
    73.4956386182449809198049843809577590645978L,
    74.0546040990771452023423104767389057414866L,
    74.5778386812613292966902479354481993917095L,
    75.0685828218624471034664630177570432654172L,
    75.5297058999341119008614748942659160353395L,
    75.9637565320735214171076798408365756790256L,
    76.3730051401084601807490599136970130157227L,
    76.7594800848127953452927039011556750268628L,
    77.1249984403875243568144698313386307384243L,
    77.4711922908484892313201264387101296497702L,
    77.7995312726192156714642002175936708679060L,
    78.1113419603720248567193715252835251474090L,
    78.4078245897089297748047548836396153355925L,
    78.6900675259797869135254945616601394202564L,
    78.9590598196762680055346197516601394192500L,
    79.2157021324374000415679466360505485960655L,
    79.4608162713717708772701905797737593789527L,
    79.6951535312339680547165811613598840136126L,
    79.9194020124576787078897222188620709784246L,
    80.1341930569156324887966534595302948823442L,
    80.3401069215576657564347059633326300317354L,
    80.5376777919743826088599294582579801842628L,
    80.7273982227996989984350074743462057825644L,
    80.9097230791776782170194932958520692926472L,
    81.0850730428521331308964493827140605307915L,
    81.2538377374447910627989195110206954742514L,
    81.4163785198860524099433092824837031614871L,
    81.5730309785193272446493026899952281397913L,
    81.7241071729247990867826969447624163298091L,
    81.8698976458440212968556125590934106575916L,
    82.0106732336031030071851597788775597853982L,
    82.1466866980217811257666345824346454330691L,
    82.2781741998690252899641892513779630860153L,
    82.4053566314085550157241367448705747504968L,
    82.5284408234076242453706847869211179952524L,
    82.6476206401076402619125548792905262505675L,
    82.7630779740319955507712233617584302621887L,
    82.8749836510982024380466991587931552509479L,
    82.9834982552770912494646989971111377847773L,
    83.0887728809753189790609806820434204280777L,
    83.1909498203865948125406219095688981093018L,
    83.2901631922430668615328987011825871328298L,
    83.3865395176852435417529328324851381837791L,
    83.4801982483430142745987074118196253418673L,
    83.5712522511701451993653221435208523289576L,
    83.6598082540900906040058623351725053777480L,
    83.7459672560835322468322981035404675931693L,
    83.8298249049703911359092144520250796594112L,
    83.9114718458048251004768203359816339928747L,
    83.9909940425054749567214190268905043079029L,
    84.0684730750802374823316651504987122315785L,
    84.1439864145710430274128234363174296908480L,
    84.2176076776359595049695176731856819893711L,
    84.2894068625003574873041186517656398885208L,
    84.3594505678431771476257293153790217278740L,
    84.4278021960362043537523667947959173771668L,
    90.0000000000000000000000000000000000000000L
};

const __Float64 __Arctan128F_table_rad[84] =
{
    0.0000000000000000000000000000000000000000E+0L,
    1.2435499454676143503135484916387102557317E-1L, /* arctan(0.125)  */
    2.4497866312686415417208248121127581091414E-1L,
    3.5877067027057222039592006392646049977698E-1L,
    4.6364760900080611621425623146121440202854E-1L,
    5.5859931534356243597150821640166127034645E-1L,
    6.4350110879328438680280922871732263804151E-1L,
    7.1882999962162450541701415152590465395142E-1L,
    7.8539816339744830961566084581987572104929E-1L,
    8.4415398611317100251784414827164750652594E-1L,
    8.9605538457134395617480071802993782702458E-1L,
    9.4200004037946366473793717053459358607166E-1L,
    9.8279372324732906798571061101466601449688E-1L,
    1.0191413442663497346383429170230636487744E+0L,
    1.0516502125483736674598673120862998296302E+0L,
    1.0808390005411683108871567292171998202703E+0L,
    1.1071487177940905030170654601785370400700E+0L,
    1.1309537439791604464709335155363278047493E+0L,
    1.1525719972156675180401498626127513797495E+0L,
    1.1722738811284763866005949441337046149712E+0L,
    1.1902899496825317329277337748293183376012E+0L,
    1.2068173702852525303955115800565576303133E+0L,
    1.2220253232109896370417417439225704908830E+0L,
    1.2360594894780819419094519711090786987027E+0L,
    1.2490457723982544258299170772810901230778E+0L,
    1.2610933822524404193139408812473357720101E+0L,
    1.2722973952087173412961937498224804940684E+0L,
    1.2827408797442707473628852511364955306249E+0L,
    1.2924966677897852679030914214070816845853E+0L,
    1.3016288340091961438047858503666855921414E+0L,
    1.3101939350475556342564376891719053122733E+0L,
    1.3182420510168370498593302023271362531155E+0L,
    1.3258176636680324650592392104284756311844E+0L,
    1.3329603993374458675538498697331558093700E+0L,
    1.3397056595989995393283037525895557411039E+0L,
    1.3460851583802539310489409282517796256512E+0L,
    1.3521273809209546571891479413898128509842E+0L,
    1.3578579772154994751124898859640585287459E+0L,
    1.3633001003596939542892985278250991189943E+0L,
    1.3684746984165928776366381936948529556191E+0L,
    1.3734007669450158608612719264449611486510E+0L,
    1.3780955681325110444536609641291551522494E+0L,
    1.3825748214901258580599674177685685125566E+0L,
    1.3868528702577214543289381097042486034883E+0L,
    1.3909428270024183486427686943836432060856E+0L,
    1.3948567013423687823948122092044222644895E+0L,
    1.3986055122719575950126700816114282335732E+0L,
    1.4021993871854670105330304794336492676944E+0L,
    1.4056476493802697809521934019958079881002E+0L,
    1.4089588955564736949699075250792569287156E+0L,
    1.4121410646084952153676136718584891599630E+0L,
    1.4152014988178669079462550975833894394929E+0L,
    1.4181469983996314594038603039700989523716E+0L,
    1.4209838702219992566633046424614466661176E+0L,
    1.4237179714064941189018190466107297503086E+0L,
    1.4263547484202526397918060597281265695725E+0L,
    1.4288992721907326964184700745371983590908E+0L,
    1.4313562697035588982240194668401779312122E+0L,
    1.4337301524847089866404719096698873648610E+0L,
    1.4360250423171655234964275337155008780675E+0L,
    1.4382447944982225979614042479354815855386E+0L,
    1.4403930189057632173997301031392126865694E+0L,
    1.4424730991091018200252920599377292525125E+0L,
    1.4444882097316563655148453598508037025938E+0L,
    1.4464413322481351841999668424758804165254E+0L,
    1.4483352693775551917970437843145232637695E+0L,
    1.4501726582147939000905940595923466567576E+0L,
    1.4519559822271314199339700039142990228105E+0L,
    1.4536875822280323362423034480994649820285E+0L,
    1.4553696664279718992423082296859928222270E+0L,
    1.4570043196511885530074841089245667532358E+0L,
    1.4585935117976422128825857356750737658039E+0L,
    1.4601391056210009726721818194296893361233E+0L,
    1.4616428638860188872060496086383008594310E+0L,
    1.4631064559620759326975975316301202111560E+0L,
    1.4645314639038178118428450961503371619177E+0L,
    1.4659193880646627234129855241049975398470E+0L,
    1.4672716522843522691530527207287398276197E+0L,
    1.4685896086876430842559640450619880951144E+0L,
    1.4698745421276027686510391411132998919794E+0L,
    1.4711276743037345918528755717617308518553E+0L,
    1.4723501675822635384916444186631899205983E+0L,
    1.4735431285433308455179928682541563973416E+0L, /* arctan(10.25) */
    1.5707963267948966192313216916397514420986E+0L  /* pi/2 */
};

/*
 *	Inverse circular tangent for quaduple precision based on degrees
 *      (arctangent)
 *
 * DESCRIPTION:
 *
 * Returns degree angle between -90 and +90 whose tangent is x.
 *
 * The function uses a rational approximation of the form
 * t + t^3 P(t^2)/Q(t^2), optimized for |t| < 0.09375.
 *
 * The argument is reduced using the identity
 *    arctan x - arctan u  =  arctan ((x-u)/(1 + ux))
 * and an 83-entry lookup table for arctan u, with u = 0, 1/8, ..., 10.25.
 * Use of the table improves the execution speed of the routine.
 *
 * ACCURACY:
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      -19, 19       4e5       1.7e-34     5.4e-35
 *
 * WARNING:
 *
 * This program uses integer operations on bit fields of floating-point
 * numbers.  It does not work with data structures other than the
 * structure assumed.
 */

Angle __cdecl __IEEE754_ATAN128F_C64F(__Float64 x, bool SwitchUnit)
{
    int32_t k, sign, lx;
    __Float64 t, u, p, q;
    __Float64 xhi;

    xhi = x;
    k = xhi.parts.msw;
    lx = xhi.parts.lsw;
    sign = k & 0x80000000;

    #ifndef TRIGONOMETRY_USE_RADIANS
    const __Float64* __ArctanF128_table =
        SwitchUnit ? __Arctan128F_table_rad : __Arctan128F_table_deg;
    #else
    const __Float64* __ArctanF128_table =
        SwitchUnit ? __Arctan128F_table_deg : __Arctan128F_table_rad;
    #endif

    /* Check for IEEE special cases.  */
    k &= 0x7fffffff;
    if (k >= 0x7ff00000)
    {
        /* NaN. */
        if (((k - 0x7ff00000) | lx) != 0)
        {
            return __Float64::FromBytes(BIG_NAN_DOUBLE).x;
        }
        /* Infinity. */
        if (sign) { return -__ArctanF128_table[83].x; }
        else { return __ArctanF128_table[83].x; }
    }

    if (k <= 0x3c800000) /* |x| <= 2**-55.  */
    {
        /* Raise inexact.  */
        if (1e300L + x > 0.0) { return Angle::FromRadians(x.x); }
    }

    if (k >= 0x46c00000) /* |x| >= 2**109.  */
    {
        /* Saturate result to {-,+}90.  */
        if (sign) { return -__ArctanF128_table[83].x; }
        else { return __ArctanF128_table[83].x; }
    }

    if (sign) { x = -x; }

    if (k >= 0x40248000) /* 10.25 */
    {
        k = 83;
        t = -1.0 / x;
    }
    else
    {
        /* Index of nearest table element.
       Roundoff to integer is asymmetrical to avoid cancellation when t < 0
           (cf. fdlibm). */
        k = int32_t(8.0 * x + 0.25);
        u = 0.125 * k;
        /* Small arctan argument.  */
        t = (x - u) / (1.0 + x * u);
    }

    /* Arctan of small argument t.  */
    static __Float64
        p0 = -4.283708356338736809269381409828726405572E+1L,
        p1 = -8.636132499244548540964557273544599863825E+1L,
        p2 = -5.713554848244551350855604111031839613216E+1L,
        p3 = -1.371405711877433266573835355036413750118E+1L,
        p4 = -8.638214309119210906997318946650189640184E-1L,
        q0 = +1.285112506901621042780814422948906537959E+2L,
        q1 = +3.361907253914337187957855834229672347089E+2L,
        q2 = +3.180448303864130128268191635189365331680E+2L,
        q3 = +1.307244136980865800160844625025280344686E+2L,
        q4 = +2.173623741810414221251136181221172551416E+1L;

    u = t * t;
    p = ((((p4 * u) + p3) * u + p2) * u + p1) * u + p0;
    q = ((((u + q4) * u + q3) * u + q2) * u + q1) * u + q0;
    u = t * u * p / q + t;

    // arctan x = arctan u  +  arctan t
    // 丹霞：这里由于剩余部分已经非常小，单位转换造成的误差已经可以忽略不计
    // 故此处直接将剩余部分进行单位转换后加上对应表中的值。
    u = __ArctanF128_table[k].x + (SwitchUnit ?
    #ifndef TRIGONOMETRY_USE_RADIANS
        u.x : Angle::FromRadians(u).ToDegrees());
    #else
        Angle::FromRadians(u).ToDegrees() : u.x);
    #endif
    if (sign) { return (-u.x); }
    else { return u.x; }
}

_END_EXTERN_C

_CSE_END
